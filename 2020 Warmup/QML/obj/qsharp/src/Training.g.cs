//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"WithProductKernel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"scale\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":33}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sample\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":50}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Double\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"WithProductKernel\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":9,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"Preprocessed\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"samples\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"Preprocessed\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"DefaultSchedule\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"samples\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":33}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"ReturnType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"SamplingSchedule\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":50},\"Item2\":{\"Line\":1,\"Column\":66}}]}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"DefaultSchedule\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifierStructure\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.MachineLearning\",\"Name\":\"ControlledRotation\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":52}}]}}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifierStructure\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"trainingVectors\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"trainingLabels\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"initialParameters\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainModel\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainHalfMoonModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":67,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"trainingVectors\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":24}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"trainingLabels\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"initialParameters\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":26}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"TrainHalfMoonModel\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":67,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ValidateHalfMoonModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"validationVectors\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"validationLabels\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":25}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"parameters\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bias\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":13}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ValidateHalfMoonModel\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":97,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifyHalfMoonModel\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":119,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"samples\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":16}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"parameters\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":19}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"bias\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":13}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"tolerance\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nMeasurements\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":6,\"Column\":9},\"Item2\":{\"Line\":6,\"Column\":22}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Double\"},{\"Case\":\"Double\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Int\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Microsoft.Quantum.Samples\",\"Name\":\"ClassifyHalfMoonModel\"},\"Attributes\":[],\"SourceFile\":\"/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs\",\"Position\":{\"Item1\":119,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
#line hidden
namespace Microsoft.Quantum.Samples
{
    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 10, 14)]
    public partial class WithProductKernel : Function<(Double,IQArray<Double>), IQArray<Double>>, ICallable
    {
        public WithProductKernel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Double,IQArray<Double>)>, IApplyData
        {
            public In((Double,IQArray<Double>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "WithProductKernel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.WithProductKernel";
        protected ICallable MicrosoftQuantumArraysFold
        {
            get;
            set;
        }

        protected ICallable<(Double,Double), Double> MicrosoftQuantumMathTimesD
        {
            get;
            set;
        }

        public override Func<(Double,IQArray<Double>), IQArray<Double>> Body => (__in__) =>
        {
            var (scale,sample) = __in__;
#line 11 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return QArray<Double>.Add(sample, new QArray<Double>((scale * MicrosoftQuantumArraysFold.Apply<Double>((MicrosoftQuantumMathTimesD, 1D, sample)))));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysFold = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Fold<,>));
            this.MicrosoftQuantumMathTimesD = this.Factory.Get<ICallable<(Double,Double), Double>>(typeof(Microsoft.Quantum.Math.TimesD));
        }

        public override IApplyData __dataIn((Double,IQArray<Double>) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Double> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Double>> Run(IOperationFactory __m__, Double scale, IQArray<Double> sample)
        {
            return __m__.Run<WithProductKernel, (Double,IQArray<Double>), IQArray<Double>>((scale, sample));
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 14, 23)]
    public partial class Preprocessed : Function<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>>, ICallable
    {
        public Preprocessed(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Preprocessed";
        String ICallable.FullName => "Microsoft.Quantum.Samples.Preprocessed";
        protected ICallable MicrosoftQuantumArraysMapped
        {
            get;
            set;
        }

        protected ICallable<(Double,IQArray<Double>), IQArray<Double>> WithProductKernel
        {
            get;
            set;
        }

        public override Func<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>> Body => (__in__) =>
        {
            var samples = __in__;
#line 15 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var scale = 1D;
#line 17 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return MicrosoftQuantumArraysMapped.Apply<IQArray<IQArray<Double>>>((WithProductKernel.Partial(new Func<IQArray<Double>, (Double,IQArray<Double>)>((__arg1__) => (scale, __arg1__))), samples));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysMapped = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Mapped<,>));
            this.WithProductKernel = this.Factory.Get<ICallable<(Double,IQArray<Double>), IQArray<Double>>>(typeof(WithProductKernel));
        }

        public override IApplyData __dataIn(IQArray<IQArray<Double>> data) => data;
        public override IApplyData __dataOut(IQArray<IQArray<Double>> data) => data;
        public static System.Threading.Tasks.Task<IQArray<IQArray<Double>>> Run(IOperationFactory __m__, IQArray<IQArray<Double>> samples)
        {
            return __m__.Run<Preprocessed, IQArray<IQArray<Double>>, IQArray<IQArray<Double>>>(samples);
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 23, 29)]
    public partial class DefaultSchedule : Function<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule>, ICallable
    {
        public DefaultSchedule(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "DefaultSchedule";
        String ICallable.FullName => "Microsoft.Quantum.Samples.DefaultSchedule";
        protected ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule> MicrosoftQuantumMachineLearningSamplingSchedule
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        public override Func<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule> Body => (__in__) =>
        {
            var samples = __in__;
#line 24 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return new Microsoft.Quantum.MachineLearning.SamplingSchedule(new QArray<QRange>(new QRange(0L, (samples.Length - 1L))));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMachineLearningSamplingSchedule = this.Factory.Get<ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(Microsoft.Quantum.MachineLearning.SamplingSchedule));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __dataIn(IQArray<IQArray<Double>> data) => data;
        public override IApplyData __dataOut(Microsoft.Quantum.MachineLearning.SamplingSchedule data) => data;
        public static System.Threading.Tasks.Task<Microsoft.Quantum.MachineLearning.SamplingSchedule> Run(IOperationFactory __m__, IQArray<IQArray<Double>> samples)
        {
            return __m__.Run<DefaultSchedule, IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule>(samples);
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 29, 34)]
    public partial class ClassifierStructure : Function<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>, ICallable
    {
        public ClassifierStructure(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ClassifierStructure";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ClassifierStructure";
        protected ICallable<((Int64,IQArray<Int64>),Pauli,Int64), Microsoft.Quantum.MachineLearning.ControlledRotation> MicrosoftQuantumMachineLearningControlledRotation
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Body => (__in__) =>
        {
#line 30 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return new QArray<Microsoft.Quantum.MachineLearning.ControlledRotation>(new Microsoft.Quantum.MachineLearning.ControlledRotation(((0L, QArray<Int64>.Create(0L)), Pauli.PauliX, 0L)));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumMachineLearningControlledRotation = this.Factory.Get<ICallable<((Int64,IQArray<Int64>),Pauli,Int64), Microsoft.Quantum.MachineLearning.ControlledRotation>>(typeof(Microsoft.Quantum.MachineLearning.ControlledRotation));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> Run(IOperationFactory __m__)
        {
            return __m__.Run<ClassifierStructure, QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>(QVoid.Instance);
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 34, 68)]
    public partial class TrainModel : Operation<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)>, ICallable
    {
        public TrainModel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>)>, IApplyData
        {
            public In((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(IQArray<Double>,Double)>, IApplyData
        {
            public Out((IQArray<Double>,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "TrainModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.TrainModel";
        protected ICallable MicrosoftQuantumArraysMapped
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample> MicrosoftQuantumMachineLearningLabeledSample
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel> MicrosoftQuantumMachineLearningSequentialModel
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure
        {
            get;
            set;
        }

        protected ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule> MicrosoftQuantumMachineLearningSamplingSchedule
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)> MicrosoftQuantumMachineLearningTrainSequentialClassifier
        {
            get;
            set;
        }

        protected ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions> MicrosoftQuantumMachineLearningDefaultTrainingOptions
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        public override Func<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)> Body => (__in__) =>
        {
            var (trainingVectors,trainingLabels,initialParameters) = __in__;
#line 40 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var samples = (IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>)MicrosoftQuantumArraysMapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>>((MicrosoftQuantumMachineLearningLabeledSample, MicrosoftQuantumArraysZip.Apply<IQArray<(IQArray<Double>,Int64)>>((trainingVectors, trainingLabels))));
#line 47 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var models = (IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>)MicrosoftQuantumArraysMapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>>((MicrosoftQuantumMachineLearningSequentialModel.Partial(new Func<IQArray<Double>, (IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double)>((__arg1__) => (ClassifierStructure.Apply(QVoid.Instance), __arg1__, 0.25D))), initialParameters));
#line 53 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var defaultSchedule = new Microsoft.Quantum.MachineLearning.SamplingSchedule(new QArray<QRange>(new QRange(0L, (samples.Length - 1L))));
#line 54 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var (optimizedModel,nMisses) = MicrosoftQuantumMachineLearningTrainSequentialClassifier.Apply((models, samples, new Microsoft.Quantum.MachineLearning.TrainingOptions((2D, 0.0005D, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item3, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item4, 3L, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item6, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item7, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item8, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item9)), defaultSchedule, defaultSchedule));
#line 64 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Training complete, found optimal parameters: {0}, {1} with {2} misses", optimizedModel.Parameters, optimizedModel.Bias, nMisses));
#line 65 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return (optimizedModel.Parameters, optimizedModel.Bias);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysMapped = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Mapped<,>));
            this.MicrosoftQuantumMachineLearningLabeledSample = this.Factory.Get<ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample>>(typeof(Microsoft.Quantum.MachineLearning.LabeledSample));
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.MicrosoftQuantumMachineLearningSequentialModel = this.Factory.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel>>(typeof(Microsoft.Quantum.MachineLearning.SequentialModel));
            this.ClassifierStructure = this.Factory.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.MicrosoftQuantumMachineLearningSamplingSchedule = this.Factory.Get<ICallable<IQArray<QRange>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(Microsoft.Quantum.MachineLearning.SamplingSchedule));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
            this.MicrosoftQuantumMachineLearningTrainSequentialClassifier = this.Factory.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)>>(typeof(Microsoft.Quantum.MachineLearning.TrainSequentialClassifier));
            this.MicrosoftQuantumMachineLearningDefaultTrainingOptions = this.Factory.Get<ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions>>(typeof(Microsoft.Quantum.MachineLearning.DefaultTrainingOptions));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __dataIn((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>) data) => new In(data);
        public override IApplyData __dataOut((IQArray<Double>,Double) data) => new Out(data);
        public static System.Threading.Tasks.Task<(IQArray<Double>,Double)> Run(IOperationFactory __m__, IQArray<IQArray<Double>> trainingVectors, IQArray<Int64> trainingLabels, IQArray<IQArray<Double>> initialParameters)
        {
            return __m__.Run<TrainModel, (IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)>((trainingVectors, trainingLabels, initialParameters));
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 68, 98)]
    public partial class TrainHalfMoonModel : Operation<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)>, ICallable
    {
        public TrainHalfMoonModel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>)>, IApplyData
        {
            public In((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(IQArray<Double>,Double)>, IApplyData
        {
            public Out((IQArray<Double>,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "TrainHalfMoonModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.TrainHalfMoonModel";
        protected ICallable MicrosoftQuantumArraysMapped
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample> MicrosoftQuantumMachineLearningLabeledSample
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>> Preprocessed
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)> MicrosoftQuantumMachineLearningTrainSequentialClassifier
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel> MicrosoftQuantumMachineLearningSequentialModel
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure
        {
            get;
            set;
        }

        protected ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions> MicrosoftQuantumMachineLearningDefaultTrainingOptions
        {
            get;
            set;
        }

        protected ICallable<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule> DefaultSchedule
        {
            get;
            set;
        }

        public override Func<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)> Body => (__in__) =>
        {
            var (trainingVectors,trainingLabels,initialParameters) = __in__;
#line 73 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var samples = (IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>)MicrosoftQuantumArraysMapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>>((MicrosoftQuantumMachineLearningLabeledSample, MicrosoftQuantumArraysZip.Apply<IQArray<(IQArray<Double>,Int64)>>((Preprocessed.Apply(trainingVectors), trainingLabels))));
#line 77 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            MicrosoftQuantumIntrinsicMessage.Apply("Ready to train.");
#line 78 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var (optimizedModel,nMisses) = MicrosoftQuantumMachineLearningTrainSequentialClassifier.Apply((MicrosoftQuantumArraysMapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>>((MicrosoftQuantumMachineLearningSequentialModel.Partial(new Func<IQArray<Double>, (IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double)>((__arg1__) => (ClassifierStructure.Apply(QVoid.Instance), __arg1__, 0D))), initialParameters)), samples, new Microsoft.Quantum.MachineLearning.TrainingOptions((0.1D, 0.005D, 15L, 10000L, 16L, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item6, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item7, MicrosoftQuantumMachineLearningDefaultTrainingOptions.Apply(QVoid.Instance).Data.Item8, MicrosoftQuantumIntrinsicMessage)), DefaultSchedule.Apply(trainingVectors), DefaultSchedule.Apply(trainingVectors)));
#line 94 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            MicrosoftQuantumIntrinsicMessage.Apply(String.Format("Training complete, found optimal parameters: {0}", optimizedModel.Parameters));
#line 95 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return (optimizedModel.Parameters, optimizedModel.Bias);
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysMapped = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Mapped<,>));
            this.MicrosoftQuantumMachineLearningLabeledSample = this.Factory.Get<ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample>>(typeof(Microsoft.Quantum.MachineLearning.LabeledSample));
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.Preprocessed = this.Factory.Get<ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>>>(typeof(Preprocessed));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.MicrosoftQuantumMachineLearningTrainSequentialClassifier = this.Factory.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.SequentialModel>,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Microsoft.Quantum.MachineLearning.TrainingOptions,Microsoft.Quantum.MachineLearning.SamplingSchedule,Microsoft.Quantum.MachineLearning.SamplingSchedule), (Microsoft.Quantum.MachineLearning.SequentialModel,Int64)>>(typeof(Microsoft.Quantum.MachineLearning.TrainSequentialClassifier));
            this.MicrosoftQuantumMachineLearningSequentialModel = this.Factory.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel>>(typeof(Microsoft.Quantum.MachineLearning.SequentialModel));
            this.ClassifierStructure = this.Factory.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.MicrosoftQuantumMachineLearningDefaultTrainingOptions = this.Factory.Get<ICallable<QVoid, Microsoft.Quantum.MachineLearning.TrainingOptions>>(typeof(Microsoft.Quantum.MachineLearning.DefaultTrainingOptions));
            this.DefaultSchedule = this.Factory.Get<ICallable<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(DefaultSchedule));
        }

        public override IApplyData __dataIn((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>) data) => new In(data);
        public override IApplyData __dataOut((IQArray<Double>,Double) data) => new Out(data);
        public static System.Threading.Tasks.Task<(IQArray<Double>,Double)> Run(IOperationFactory __m__, IQArray<IQArray<Double>> trainingVectors, IQArray<Int64> trainingLabels, IQArray<IQArray<Double>> initialParameters)
        {
            return __m__.Run<TrainHalfMoonModel, (IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<IQArray<Double>>), (IQArray<Double>,Double)>((trainingVectors, trainingLabels, initialParameters));
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 98, 120)]
    public partial class ValidateHalfMoonModel : Operation<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double), Double>, ICallable
    {
        public ValidateHalfMoonModel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double)>, IApplyData
        {
            public In((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "ValidateHalfMoonModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ValidateHalfMoonModel";
        protected ICallable MicrosoftQuantumArraysMapped
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample> MicrosoftQuantumMachineLearningLabeledSample
        {
            get;
            set;
        }

        protected ICallable MicrosoftQuantumArraysZip
        {
            get;
            set;
        }

        protected ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>> Preprocessed
        {
            get;
            set;
        }

        protected ICallable<(Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Double,Int64,Microsoft.Quantum.MachineLearning.SamplingSchedule), Microsoft.Quantum.MachineLearning.ValidationResults> MicrosoftQuantumMachineLearningValidateSequentialClassifier
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel> MicrosoftQuantumMachineLearningSequentialModel
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure
        {
            get;
            set;
        }

        protected ICallable<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule> DefaultSchedule
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> MicrosoftQuantumConvertIntAsDouble
        {
            get;
            set;
        }

        protected ICallable Length
        {
            get;
            set;
        }

        public override Func<(IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double), Double> Body => (__in__) =>
        {
            var (validationVectors,validationLabels,parameters,bias) = __in__;
#line 104 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var samples = (IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>)MicrosoftQuantumArraysMapped.Apply<IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>>((MicrosoftQuantumMachineLearningLabeledSample, MicrosoftQuantumArraysZip.Apply<IQArray<(IQArray<Double>,Int64)>>((Preprocessed.Apply(validationVectors), validationLabels))));
#line 108 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var tolerance = 0.005D;
#line 109 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var nMeasurements = 10000L;
#line 110 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var results = MicrosoftQuantumMachineLearningValidateSequentialClassifier.Apply((new Microsoft.Quantum.MachineLearning.SequentialModel((ClassifierStructure.Apply(QVoid.Instance), parameters, bias)), samples, tolerance, nMeasurements, DefaultSchedule.Apply(validationVectors)));
#line 117 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return (MicrosoftQuantumConvertIntAsDouble.Apply(results.NMisclassifications) / MicrosoftQuantumConvertIntAsDouble.Apply(samples.Length));
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumArraysMapped = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Mapped<,>));
            this.MicrosoftQuantumMachineLearningLabeledSample = this.Factory.Get<ICallable<(IQArray<Double>,Int64), Microsoft.Quantum.MachineLearning.LabeledSample>>(typeof(Microsoft.Quantum.MachineLearning.LabeledSample));
            this.MicrosoftQuantumArraysZip = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Arrays.Zip<,>));
            this.Preprocessed = this.Factory.Get<ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>>>(typeof(Preprocessed));
            this.MicrosoftQuantumMachineLearningValidateSequentialClassifier = this.Factory.Get<ICallable<(Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<Microsoft.Quantum.MachineLearning.LabeledSample>,Double,Int64,Microsoft.Quantum.MachineLearning.SamplingSchedule), Microsoft.Quantum.MachineLearning.ValidationResults>>(typeof(Microsoft.Quantum.MachineLearning.ValidateSequentialClassifier));
            this.MicrosoftQuantumMachineLearningSequentialModel = this.Factory.Get<ICallable<(IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>,IQArray<Double>,Double), Microsoft.Quantum.MachineLearning.SequentialModel>>(typeof(Microsoft.Quantum.MachineLearning.SequentialModel));
            this.ClassifierStructure = this.Factory.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.DefaultSchedule = this.Factory.Get<ICallable<IQArray<IQArray<Double>>, Microsoft.Quantum.MachineLearning.SamplingSchedule>>(typeof(DefaultSchedule));
            this.MicrosoftQuantumConvertIntAsDouble = this.Factory.Get<ICallable<Int64, Double>>(typeof(Microsoft.Quantum.Convert.IntAsDouble));
            this.Length = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __dataIn((IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double) data) => new In(data);
        public override IApplyData __dataOut(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__, IQArray<IQArray<Double>> validationVectors, IQArray<Int64> validationLabels, IQArray<Double> parameters, Double bias)
        {
            return __m__.Run<ValidateHalfMoonModel, (IQArray<IQArray<Double>>,IQArray<Int64>,IQArray<Double>,Double), Double>((validationVectors, validationLabels, parameters, bias));
        }
    }

    [SourceLocation("/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs", OperationFunctor.Body, 120, -1)]
    public partial class ClassifyHalfMoonModel : Operation<(IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64), IQArray<Int64>>, ICallable
    {
        public ClassifyHalfMoonModel(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64)>, IApplyData
        {
            public In((IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "ClassifyHalfMoonModel";
        String ICallable.FullName => "Microsoft.Quantum.Samples.ClassifyHalfMoonModel";
        protected ICallable Default
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>> ClassifierStructure
        {
            get;
            set;
        }

        protected ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>> Preprocessed
        {
            get;
            set;
        }

        protected ICallable<(Double,Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<IQArray<Double>>,Int64), IQArray<Double>> MicrosoftQuantumMachineLearningEstimateClassificationProbabilities
        {
            get;
            set;
        }

        protected ICallable<(Double,IQArray<Double>), IQArray<Int64>> MicrosoftQuantumMachineLearningInferredLabels
        {
            get;
            set;
        }

        public override Func<(IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64), IQArray<Int64>> Body => (__in__) =>
        {
            var (samples,parameters,bias,tolerance,nMeasurements) = __in__;
#line 128 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var model = new Microsoft.Quantum.MachineLearning.SequentialModel((ClassifierStructure.Apply(QVoid.Instance), parameters, bias));
#line 132 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var features = (IQArray<IQArray<Double>>)Preprocessed.Apply(samples);
#line 133 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            var probabilities = (IQArray<Double>)MicrosoftQuantumMachineLearningEstimateClassificationProbabilities.Apply((tolerance, model, features, nMeasurements));
#line 137 "/Users/vibhavaggarwal/Desktop/vibPersonal/Microsoft%20Q%23/2020%20Warmup/QML/Training.qs"
            return MicrosoftQuantumMachineLearningInferredLabels.Apply((model.Bias, probabilities));
        }

        ;
        public override void Init()
        {
            this.Default = this.Factory.Get<ICallable>(typeof(Microsoft.Quantum.Core.Default<>));
            this.ClassifierStructure = this.Factory.Get<ICallable<QVoid, IQArray<Microsoft.Quantum.MachineLearning.ControlledRotation>>>(typeof(ClassifierStructure));
            this.Preprocessed = this.Factory.Get<ICallable<IQArray<IQArray<Double>>, IQArray<IQArray<Double>>>>(typeof(Preprocessed));
            this.MicrosoftQuantumMachineLearningEstimateClassificationProbabilities = this.Factory.Get<ICallable<(Double,Microsoft.Quantum.MachineLearning.SequentialModel,IQArray<IQArray<Double>>,Int64), IQArray<Double>>>(typeof(Microsoft.Quantum.MachineLearning.EstimateClassificationProbabilities));
            this.MicrosoftQuantumMachineLearningInferredLabels = this.Factory.Get<ICallable<(Double,IQArray<Double>), IQArray<Int64>>>(typeof(Microsoft.Quantum.MachineLearning.InferredLabels));
        }

        public override IApplyData __dataIn((IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64) data) => new In(data);
        public override IApplyData __dataOut(IQArray<Int64> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Int64>> Run(IOperationFactory __m__, IQArray<IQArray<Double>> samples, IQArray<Double> parameters, Double bias, Double tolerance, Int64 nMeasurements)
        {
            return __m__.Run<ClassifyHalfMoonModel, (IQArray<IQArray<Double>>,IQArray<Double>,Double,Double,Int64), IQArray<Int64>>((samples, parameters, bias, tolerance, nMeasurements));
        }
    }
}